// Polynomial with integral turning points

=============================================================
Quadratic

y = c_2*x^2 + c_1*x + c_0

y' = b_1*(x - x_s1)
y' = b_1*x - b_1*x_s1
y = (b_1 * x ^ 2)/2  - b_1*x_s1*x + b_0

b_1 must be a multiple of 2, b_1>0 for minimum,  b_1<0 for maximum
x_s1 is the x-position of the turning point

c_2 = b_1/2 
c_1 = b_1*x_s1
c_0 = b_0

For 2 x-intercepts
(c_2>0 and y_s1<0) or (c_2<0 and y_s1>0)
For 0 x-intercepts
(c_2>0 and y_s1>0) or (c_2<0 and y_s1<0)


=============================================================
Cubic

y = c_3*x^3 + c_2*x^2 + c_1*x + c_0
y' = b_1*(x - x_s1)*(x - x_s2)
y' = b_1*(x^2 - x_s1*x - x_s2*x + x_s1*x_s2)
y' = b_1*(x^2 - (x_s1 + x_s2)*x + x_s1*x_s2)
y = b_1*(x^3/3 - (x_s1 + x_s2)*x^2/2 + x_s1*x_s2*x) + b_0

c_3 = b_1/3
c_2 = -b_1*(x_s1 + x_s2)/2
c_1 = b_1*x_s1*x_s2
c_0 = b_0

Infection point
y'' = b_1*(2*x - (x_s1 + x_s2))
0 = b_1*(2*x_inf1 - (x_s1 + x_s2))
0 = 2*x_inf1 - (x_s1 + x_s2)
x_inf1 = (x_s1 + x_s2) / 2

Set x_s1 = x_s2 to get a single steady point.

For 3 x intercepts
((y_s1 > 0 and y_s2 < 0) or (y_s1 < 0 and y_s2 > 0))
For 1 x intercept
((y_s1 > 0 and y_s2 > 0) or (y_s1 < 0 and y_s2 < 0))



=============================================================
Quartic
y = c_4*x^4 + c_3*x^3 + c_2*x^2 + c_1*x + c_0
y' = b_1*(x - x_s1)*(x - x_s2)*(x - x_s3)
y' = b_1*(x^2 - x_s1*x - x_s2*x + x_s1*x_s2)*(x - x_s3)
y' = b_1*(x^2 - (x_s1 + x_s2)*x + x_s1*x_s2)*(x - x_s3)
y' = b_1*(x^3 - (x_s1 + x_s2)*x^2 + x_s1*x_s2*x - x_s3*x^2 + x_s3*(x_s1 + x_s2)*x - x_s3*x_s1*x_s2)

y' = b_1*(x^3 - (x_s1 + x_s2 + x_s3)*x^2 + (x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3)*x - x_s3*x_s1*x_s2)

y = b_1*(x^4/4 - (x_s1 + x_s2 + x_s3)/3*x^3 + (x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3)/2*x^2 - x_s3*x_s1*x_s2*x) + b_0

c_4 = b_1/4
c_3 = -b_1*(x_s1 + x_s2 + x_s3)/3
c_2 = b_1*(x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3)/2
c_1 = -b_1*x_s3*x_s1*x_s2
c_0 = b_0

Infection point
y'' = b_1*(3x^2 - 2(x_s1 + x_s2 + x_s3)*x + (x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3))
0 = b_1*(3x_inf^2 - 2(x_s1 + x_s2 + x_s3)*x_inf + (x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3))
0 = 3x_inf^2 - 2(x_s1 + x_s2 + x_s3)*x_inf + (x_s1*x_s2 + x_s1*x_s3 + x_s2*x_s3)

Put this into Wolfram Alpha
0 = 3x^2 - 2(a + b + c)*x + (a*b + a*c + b*c)
x = 1/3 (-sqrt(a^2 - a b - a c + b^2 - b c + c^2) + a + b + c)
x = 1/3 (sqrt(a^2 - a b - a c + b^2 - b c + c^2) + a + b + c)

x_inf1 = 1/3 (-sqrt(x_s1^2 - x_s1*x_s2 - x_s1*x_s3 + x_s2^2 - x_s2*x_s3 + x_s3^2) + x_s1 + x_s2 + x_s3)
x_inf2 = 1/3 ( sqrt(x_s1^2 - x_s1*x_s2 - x_s1*x_s3 + x_s2^2 - x_s2*x_s3 + x_s3^2) + x_s1 + x_s2 + x_s3)


=====================================
General curve logic (to avoid conflicts)
y_intercept <> 0 (to avoid x intercept and y intercept clashes)
x_s1 <> 0 (to avoid y intercept and stable point clashes)
y_s1 <> 0 (to avoid x intercept and stable point clashes)
x_s1 <> x_s2 (to avoid stable point clashes)
The above logic should avoid x-intercept clashes, as well, as multiple roots are only possible on stable points. 

